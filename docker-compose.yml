services:

  traefik:
    image: traefik:v2.10
    container_name: traefik_proxy
    restart: unless-stopped
    command:
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--entrypoints.web.address=:80"
    ports:
      - "80:80"
      - "8080:8080"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
    networks:
      - traefik_network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.dashboard.rule=Host(`charizard.localhost`)"
      - "traefik.http.services.dashboard.loadbalancer.server.port=8080"

  jorge-neo4j:
    image: neo4j:5.22.0-community
    container_name: neo4j_db
    restart: always
    environment:
      NEO4J_AUTH: "${NEO4J_USER}/${NEO4J_PASSWORD}"
    volumes:
      - neo4j_data:/data
      - ./import:/import
    networks:
      - traefik_network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.neo4j.rule=Host(`greninja.localhost`)"
      - "traefik.http.routers.neo4j.middlewares=neo4j-auth"
      - "traefik.http.middlewares.neo4j-auth.basicauth.users=${DASHBOARD_USER}:${DASHBOARD_PASSWORD}"
      - "traefik.http.services.neo4j.loadbalancer.server.port=7474"

  flask-api-1:
    build: ./flask
    container_name: flask_comercial_1
    restart: always
    depends_on:
      - jorge-neo4j
      - traefik
    environment:
      - NEO4J_URI=${NEO4J_URI}
      - NEO4J_USER=${NEO4J_USER}
      - NEO4J_PASSWORD=${NEO4J_PASSWORD}
    networks:
      - traefik_network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.comercial.rule=Host(`blastoise.localhost`) && Path(`/`)"
      - "traefik.http.routers.comercial.middlewares=rate-limit"
      - "traefik.http.middlewares.rate-limit.ratelimit.burst=1"
      - "traefik.http.middlewares.rate-limit.ratelimit.average=1"
      - "traefik.http.middlewares.rate-limit.ratelimit.period=60s"
      - "traefik.http.routers.comercial.service=comercial"
      - "traefik.http.services.comercial.loadbalancer.server.port=5000"

  flask-api-2:
    build: ./flask
    container_name: flask_comercial_2
    restart: always
    depends_on:
      - jorge-neo4j
      - traefik
    environment:
      - NEO4J_URI=${NEO4J_URI}
      - NEO4J_USER=${NEO4J_USER}
      - NEO4J_PASSWORD=${NEO4J_PASSWORD}
    networks:
      - traefik_network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.comercial2.rule=Host(`blastoise.localhost`) && Path(`/`)"
      - "traefik.http.routers.comercial2.middlewares=rate-limit"
      - "traefik.http.routers.comercial2.service=comercial"

  flask-api-legendario:
    build: ./flask
    container_name: flask_legendario
    restart: always
    depends_on:
      - jorge-neo4j
      - traefik
    environment:
      - NEO4J_URI=${NEO4J_URI}
      - NEO4J_USER=${NEO4J_USER}
      - NEO4J_PASSWORD=${NEO4J_PASSWORD}
    networks:
      - traefik_network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.legendario.rule=Host(`blastoise.localhost`) && PathPrefix(`/secure/legendario`)"
      - "traefik.http.routers.legendario.middlewares=security-strip"
      - "traefik.http.middlewares.security-strip.stripprefix.prefixes=/secure"
      - "traefik.http.routers.legendario.service=legendario"
      - "traefik.http.routers.legendario.priority=100"
      - "traefik.http.services.legendario.loadbalancer.server.port=5000"

volumes:
  neo4j_data:

networks:
  traefik_network:
    driver: bridge